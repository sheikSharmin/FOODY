// Generated by view binder compiler. Do not edit!
package com.michael.foody.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.HorizontalScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.michael.foody.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RecipesBottomSheetBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Chip appetizerChip;

  @NonNull
  public final Button applyBtn;

  @NonNull
  public final Chip beverageChip;

  @NonNull
  public final Chip breadChip;

  @NonNull
  public final Chip breakfastChip;

  @NonNull
  public final Chip dessertChip;

  @NonNull
  public final ChipGroup dietTypeChipGroup;

  @NonNull
  public final HorizontalScrollView dietTypeScrollView;

  @NonNull
  public final TextView dietTypeTxt;

  @NonNull
  public final Chip drinkChip;

  @NonNull
  public final Chip fingerFoodChip;

  @NonNull
  public final Chip glutenFreeChip;

  @NonNull
  public final Chip ketogenicChip;

  @NonNull
  public final Chip mainCourseChip;

  @NonNull
  public final Chip marinadeChip;

  @NonNull
  public final ChipGroup mealTypeChipGroup;

  @NonNull
  public final HorizontalScrollView mealTypeScrollView;

  @NonNull
  public final TextView mealTypeTxt;

  @NonNull
  public final Chip paleoChip;

  @NonNull
  public final Chip pescetarianChip;

  @NonNull
  public final Chip primalChip;

  @NonNull
  public final Chip saladChip;

  @NonNull
  public final Chip sauceChip;

  @NonNull
  public final Chip sideDishChip;

  @NonNull
  public final Chip snackChip;

  @NonNull
  public final Chip soupChip;

  @NonNull
  public final Chip veganChip;

  @NonNull
  public final Chip vegetarianChip;

  @NonNull
  public final Chip whole30Chip;

  private RecipesBottomSheetBinding(@NonNull ConstraintLayout rootView, @NonNull Chip appetizerChip,
      @NonNull Button applyBtn, @NonNull Chip beverageChip, @NonNull Chip breadChip,
      @NonNull Chip breakfastChip, @NonNull Chip dessertChip, @NonNull ChipGroup dietTypeChipGroup,
      @NonNull HorizontalScrollView dietTypeScrollView, @NonNull TextView dietTypeTxt,
      @NonNull Chip drinkChip, @NonNull Chip fingerFoodChip, @NonNull Chip glutenFreeChip,
      @NonNull Chip ketogenicChip, @NonNull Chip mainCourseChip, @NonNull Chip marinadeChip,
      @NonNull ChipGroup mealTypeChipGroup, @NonNull HorizontalScrollView mealTypeScrollView,
      @NonNull TextView mealTypeTxt, @NonNull Chip paleoChip, @NonNull Chip pescetarianChip,
      @NonNull Chip primalChip, @NonNull Chip saladChip, @NonNull Chip sauceChip,
      @NonNull Chip sideDishChip, @NonNull Chip snackChip, @NonNull Chip soupChip,
      @NonNull Chip veganChip, @NonNull Chip vegetarianChip, @NonNull Chip whole30Chip) {
    this.rootView = rootView;
    this.appetizerChip = appetizerChip;
    this.applyBtn = applyBtn;
    this.beverageChip = beverageChip;
    this.breadChip = breadChip;
    this.breakfastChip = breakfastChip;
    this.dessertChip = dessertChip;
    this.dietTypeChipGroup = dietTypeChipGroup;
    this.dietTypeScrollView = dietTypeScrollView;
    this.dietTypeTxt = dietTypeTxt;
    this.drinkChip = drinkChip;
    this.fingerFoodChip = fingerFoodChip;
    this.glutenFreeChip = glutenFreeChip;
    this.ketogenicChip = ketogenicChip;
    this.mainCourseChip = mainCourseChip;
    this.marinadeChip = marinadeChip;
    this.mealTypeChipGroup = mealTypeChipGroup;
    this.mealTypeScrollView = mealTypeScrollView;
    this.mealTypeTxt = mealTypeTxt;
    this.paleoChip = paleoChip;
    this.pescetarianChip = pescetarianChip;
    this.primalChip = primalChip;
    this.saladChip = saladChip;
    this.sauceChip = sauceChip;
    this.sideDishChip = sideDishChip;
    this.snackChip = snackChip;
    this.soupChip = soupChip;
    this.veganChip = veganChip;
    this.vegetarianChip = vegetarianChip;
    this.whole30Chip = whole30Chip;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RecipesBottomSheetBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RecipesBottomSheetBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.recipes_bottom_sheet, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RecipesBottomSheetBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appetizer_chip;
      Chip appetizerChip = ViewBindings.findChildViewById(rootView, id);
      if (appetizerChip == null) {
        break missingId;
      }

      id = R.id.apply_btn;
      Button applyBtn = ViewBindings.findChildViewById(rootView, id);
      if (applyBtn == null) {
        break missingId;
      }

      id = R.id.beverage_chip;
      Chip beverageChip = ViewBindings.findChildViewById(rootView, id);
      if (beverageChip == null) {
        break missingId;
      }

      id = R.id.bread_chip;
      Chip breadChip = ViewBindings.findChildViewById(rootView, id);
      if (breadChip == null) {
        break missingId;
      }

      id = R.id.breakfast_chip;
      Chip breakfastChip = ViewBindings.findChildViewById(rootView, id);
      if (breakfastChip == null) {
        break missingId;
      }

      id = R.id.dessert_chip;
      Chip dessertChip = ViewBindings.findChildViewById(rootView, id);
      if (dessertChip == null) {
        break missingId;
      }

      id = R.id.dietType_chipGroup;
      ChipGroup dietTypeChipGroup = ViewBindings.findChildViewById(rootView, id);
      if (dietTypeChipGroup == null) {
        break missingId;
      }

      id = R.id.dietType_scrollView;
      HorizontalScrollView dietTypeScrollView = ViewBindings.findChildViewById(rootView, id);
      if (dietTypeScrollView == null) {
        break missingId;
      }

      id = R.id.dietType_txt;
      TextView dietTypeTxt = ViewBindings.findChildViewById(rootView, id);
      if (dietTypeTxt == null) {
        break missingId;
      }

      id = R.id.drink_chip;
      Chip drinkChip = ViewBindings.findChildViewById(rootView, id);
      if (drinkChip == null) {
        break missingId;
      }

      id = R.id.finger_food_chip;
      Chip fingerFoodChip = ViewBindings.findChildViewById(rootView, id);
      if (fingerFoodChip == null) {
        break missingId;
      }

      id = R.id.gluten_free_chip;
      Chip glutenFreeChip = ViewBindings.findChildViewById(rootView, id);
      if (glutenFreeChip == null) {
        break missingId;
      }

      id = R.id.ketogenic_chip;
      Chip ketogenicChip = ViewBindings.findChildViewById(rootView, id);
      if (ketogenicChip == null) {
        break missingId;
      }

      id = R.id.main_course_chip;
      Chip mainCourseChip = ViewBindings.findChildViewById(rootView, id);
      if (mainCourseChip == null) {
        break missingId;
      }

      id = R.id.marinade_chip;
      Chip marinadeChip = ViewBindings.findChildViewById(rootView, id);
      if (marinadeChip == null) {
        break missingId;
      }

      id = R.id.mealType_chipGroup;
      ChipGroup mealTypeChipGroup = ViewBindings.findChildViewById(rootView, id);
      if (mealTypeChipGroup == null) {
        break missingId;
      }

      id = R.id.mealType_scrollView;
      HorizontalScrollView mealTypeScrollView = ViewBindings.findChildViewById(rootView, id);
      if (mealTypeScrollView == null) {
        break missingId;
      }

      id = R.id.mealType_txt;
      TextView mealTypeTxt = ViewBindings.findChildViewById(rootView, id);
      if (mealTypeTxt == null) {
        break missingId;
      }

      id = R.id.paleo_chip;
      Chip paleoChip = ViewBindings.findChildViewById(rootView, id);
      if (paleoChip == null) {
        break missingId;
      }

      id = R.id.pescetarian_chip;
      Chip pescetarianChip = ViewBindings.findChildViewById(rootView, id);
      if (pescetarianChip == null) {
        break missingId;
      }

      id = R.id.primal_chip;
      Chip primalChip = ViewBindings.findChildViewById(rootView, id);
      if (primalChip == null) {
        break missingId;
      }

      id = R.id.salad_chip;
      Chip saladChip = ViewBindings.findChildViewById(rootView, id);
      if (saladChip == null) {
        break missingId;
      }

      id = R.id.sauce_chip;
      Chip sauceChip = ViewBindings.findChildViewById(rootView, id);
      if (sauceChip == null) {
        break missingId;
      }

      id = R.id.side_dish_chip;
      Chip sideDishChip = ViewBindings.findChildViewById(rootView, id);
      if (sideDishChip == null) {
        break missingId;
      }

      id = R.id.snack_chip;
      Chip snackChip = ViewBindings.findChildViewById(rootView, id);
      if (snackChip == null) {
        break missingId;
      }

      id = R.id.soup_chip;
      Chip soupChip = ViewBindings.findChildViewById(rootView, id);
      if (soupChip == null) {
        break missingId;
      }

      id = R.id.vegan_chip;
      Chip veganChip = ViewBindings.findChildViewById(rootView, id);
      if (veganChip == null) {
        break missingId;
      }

      id = R.id.vegetarian_chip;
      Chip vegetarianChip = ViewBindings.findChildViewById(rootView, id);
      if (vegetarianChip == null) {
        break missingId;
      }

      id = R.id.whole30_chip;
      Chip whole30Chip = ViewBindings.findChildViewById(rootView, id);
      if (whole30Chip == null) {
        break missingId;
      }

      return new RecipesBottomSheetBinding((ConstraintLayout) rootView, appetizerChip, applyBtn,
          beverageChip, breadChip, breakfastChip, dessertChip, dietTypeChipGroup,
          dietTypeScrollView, dietTypeTxt, drinkChip, fingerFoodChip, glutenFreeChip, ketogenicChip,
          mainCourseChip, marinadeChip, mealTypeChipGroup, mealTypeScrollView, mealTypeTxt,
          paleoChip, pescetarianChip, primalChip, saladChip, sauceChip, sideDishChip, snackChip,
          soupChip, veganChip, vegetarianChip, whole30Chip);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
